import React, { Component } from 'react'
import { connect } from 'react-redux'
import { auth }  from 'actions'
import Request from '../request'
import { ToastContainer, toast } from 'react-toastify'
import 'react-toastify/dist/ReactToastify.css'

export class FluidInput extends Component {
    constructor(props) {
        super(props);
        this.state = {
            focused: false,
            value: ""
        };
    }
    focusField() {
        const { focused } = this.state;
        this.setState({
            focused: !focused
        });
    }
    handleChange(event) {

        let newUser = []
        const { target } = event;
        const { value } = target;
        this.setState({
            value: value
        });

        this.props.onInputChange(event.target.name ,event.target.value )

    }
    render() {
        const { type, label, style, id, valid } = this.props;
        const { focused, value } = this.state;

        let inputClass = "fluid-input";
        if (focused) {
            inputClass += " fluid-input--focus";
        } else if (value != "") {
            inputClass += " fluid-input--open";
        }

        return (
            <div className={inputClass} style={style}>
                <div className={valid ? "fluid-input-holder" : "fluid-input-holder error"}>
                    <input
                        className="fluid-input-input"
                        type={type}
                        name={id}
                        id={id}
                        onFocus={this.focusField.bind(this)}
                        onBlur={this.focusField.bind(this)}
                        onChange={this.handleChange.bind(this)}
                        autoComplete="off"
                    />
                    <label className="fluid-input-label" htmlFor={id}>{label}</label>

                </div>
            </div>
        );
    }
}
FluidInput.defaultProps = {
    valid : true
}


export class Button extends Component {
    render() {
        return (
            <div className={`button ${this.props.buttonClass}`} onClick={this.props.onClick}>
                {this.props.buttonText}
            </div>
        );
    }
}

class SignUpContainer extends Component {

    state = {
          user : {
              action : 'register'
          },
          passValid : true,
          authErrorMessage : null
    }

    onInputChange = (name, value) => {
        const user = {...this.state.user, [name] : value}
        this.setState({user})
    }

    onSubmit = () => {

        console.log(Object.keys(this.state.user))

        if(Object.keys(this.state.user).length !== 4) return

        if(this.state.user.password !== this.state.user.passwordAgain) {
            this.setState({passValid: false})
        }
            else{
                this.setState({passValid : true})
                toast.success(`Добро пожаловать , вы были анонимно зарегистрированны`, {
                position: toast.POSITION.BOTTOM_RIGHT
            })
            const userAuth = Request('POST', this.state.user)
            if(userAuth.status == 'succsess'){
                this.props.auth(userAuth.id)
            }
            if(userAuth.status == 'error'){
                this.setState ({ authErrorMessage : userAuth.message})

            }
            }

    }
    render() {

        const style = {
            margin: "15px 0"
        };
        return (
            <div className="login-container">
                <div className="title">
                    Sign Up
                </div>
                <FluidInput type="text"  label="name" id="name" style={style} onInputChange={this.onInputChange}/>
                <FluidInput type="password" valid={this.state.passValid} label="password" id="password" style={style} onInputChange={this.onInputChange}/>
                <FluidInput type="password" valid={this.state.passValid} label="password again" id="passwordAgain" style={style} onInputChange={this.onInputChange}/>
                { this.state.authErrorMessage ? <p>{this.state.authErrorMessage}</p> : null}
                <Button buttonText="Sign-Up" buttonClass="login-button" onClick={this.onSubmit}/>
                <ToastContainer />
            </div>
        );
    }
}


const mapDispatchToProps = {
    auth
}



export default connect(null, mapDispatchToProps)(SignUpContainer)